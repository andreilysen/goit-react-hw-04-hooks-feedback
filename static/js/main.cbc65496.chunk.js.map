{"version":3,"sources":["components/Section/Section.js","components/ButtonFeedback/ButtonFeedback.js","components/Statistics/Statistics.js","components/Notification/Notification.js","components/App/App.js","index.js","components/Statistics/Statistic.module.css","components/ButtonFeedback/Button.module.css"],"names":["Section","title","children","FeedbackOptions","options","onLeaveFeedback","Object","keys","map","option","type","name","className","styles","button","onClick","Statistics","total","goodPercentage","good","neutral","bad","item","Notification","message","App","useState","setGood","setNeutral","setBad","countTotalFeedback","e","target","prevState","Math","round","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"+OAiBeA,EAdC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACxB,OACE,qCACE,6BAAKD,IACJC,M,gBCoBQC,EAvBS,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,gBAClC,OACE,mCACGC,OAAOC,KAAKH,GAASI,KAAI,SAACC,GAAD,OACxB,wBAEEC,KAAK,SACLC,KAAMF,EACNG,UAAWC,IAAOC,OAClBC,QAASV,EALX,SAOGI,GANIA,S,gBCiBAO,EAtBI,SAAC,GAAmD,IAAjDC,EAAgD,EAAhDA,MAAOC,EAAyC,EAAzCA,eAAgBC,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,QAASC,EAAU,EAAVA,IAC1D,OACE,mCACE,+BACE,qBAAIT,UAAWC,IAAOS,KAAtB,oBAAoCH,KACpC,qBAAIP,UAAWC,IAAOS,KAAtB,uBAAuCF,KACvC,qBAAIR,UAAWC,IAAOS,KAAtB,mBAAmCD,KACnC,qBAAIT,UAAWC,IAAOS,KAAtB,qBAAqCL,KACrC,qBAAIL,UAAWC,IAAOS,KAAtB,iCAAiDJ,EAAjD,cCHOK,EANM,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OAAiB,4BAAIA,KC6G3BC,EA1GH,WACV,MAAwBC,mBAAS,GAAjC,mBAAOP,EAAP,KAAaQ,EAAb,KACA,EAA8BD,mBAAS,GAAvC,mBAAON,EAAP,KAAgBQ,EAAhB,KACA,EAAsBF,mBAAS,GAA/B,mBAAOL,EAAP,KAAYQ,EAAZ,KAmBMC,EAAqB,WACzB,OAAOX,EAAOC,EAAUC,GAO1B,OACE,gCACE,cAAC,EAAD,CAASpB,MAAO,wBAAhB,SACE,cAAC,EAAD,CACEG,QAAS,CAAEe,OAAMC,UAASC,OAC1BhB,gBA9BU,SAAC0B,GAEjB,OADiBA,EAAEC,OAAXrB,MAEN,IAAK,OACHgB,GAAQ,SAACM,GAAD,OAAeA,EAAY,KACnC,MACF,IAAK,UACHL,GAAW,SAACK,GAAD,OAAeA,EAAY,KACtC,MACF,IAAK,MACHJ,GAAO,SAACI,GAAD,OAAeA,EAAY,KAClC,MACF,QACE,aAqBF,cAAC,EAAD,CAAShC,MAAO,aAAhB,SACG6B,IACC,cAAC,EAAD,CACEb,MAAOa,IACPZ,eAhBDgB,KAAKC,MAAOhB,EAAOW,IAAwB,KAiB1CX,KAAMA,EACNC,QAASA,EACTC,IAAKA,IAGP,cAAC,EAAD,CAAcG,QAAS,4BClDjCY,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U,kBCR1BC,EAAOC,QAAU,CAAC,KAAO,0B,kBCAzBD,EAAOC,QAAU,CAAC,OAAS,0B","file":"static/js/main.cbc65496.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Section = ({ title, children }) => {\n  return (\n    <>\n      <h2>{title}</h2>\n      {children}\n    </>\n  );\n};\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.node.isRequired,\n};\n\nexport default Section;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styles from \"./Button.module.css\";\n\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => {\n  return (\n    <>\n      {Object.keys(options).map((option) => (\n        <button\n          key={option}\n          type=\"button\"\n          name={option}\n          className={styles.button}\n          onClick={onLeaveFeedback}\n        >\n          {option}\n        </button>\n      ))}\n    </>\n  );\n};\n\nFeedbackOptions.propTypes = {\n  options: PropTypes.objectOf(PropTypes.number).isRequired,\n  onLeaveFeedback: PropTypes.func.isRequired,\n};\n\nexport default FeedbackOptions;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styles from \"./Statistic.module.css\";\n\nconst Statistics = ({ total, goodPercentage, good, neutral, bad }) => {\n  return (\n    <>\n      <ul>\n        <li className={styles.item}>good : {good}</li>\n        <li className={styles.item}>neutral : {neutral}</li>\n        <li className={styles.item}>bad : {bad}</li>\n        <li className={styles.item}>Total : {total}</li>\n        <li className={styles.item}>Positive feedback : {goodPercentage} %</li>\n      </ul>\n    </>\n  );\n};\n\nStatistics.propTypes = {\n  total: PropTypes.number.isRequired,\n  goodPercentage: PropTypes.number.isRequired,\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n};\n\nexport default Statistics;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Notification = ({ message }) => <p>{message}</p>;\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n\nexport default Notification;\n","import { useState } from \"react\";\nimport Section from \"../Section\";\nimport FeedbackOptions from \"../ButtonFeedback\";\nimport Statistics from \"../Statistics\";\nimport Notification from \"../Notification\";\n\nconst App = () => {\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n\n  const Increment = (e) => {\n    const { name } = e.target;\n    switch (name) {\n      case \"good\":\n        setGood((prevState) => prevState + 1);\n        break;\n      case \"neutral\":\n        setNeutral((prevState) => prevState + 1);\n        break;\n      case \"bad\":\n        setBad((prevState) => prevState + 1);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const countTotalFeedback = () => {\n    return good + neutral + bad;\n  };\n\n  const countPositiveFeedbackPercentage = () => {\n    return Math.round((good / countTotalFeedback()) * 100);\n  };\n\n  return (\n    <div>\n      <Section title={\"Please leave feedback\"}>\n        <FeedbackOptions\n          options={{ good, neutral, bad }}\n          onLeaveFeedback={Increment}\n        />\n      </Section>\n\n      <Section title={\"Statistics\"}>\n        {countTotalFeedback() ? (\n          <Statistics\n            total={countTotalFeedback()}\n            goodPercentage={countPositiveFeedbackPercentage()}\n            good={good}\n            neutral={neutral}\n            bad={bad}\n          />\n        ) : (\n          <Notification message={\"No feedback given\"} />\n        )}\n      </Section>\n    </div>\n  );\n};\n\n// class App extends Component {\n//   state = {\n//     good: 0,\n//     neutral: 0,\n//     bad: 0,\n//   };\n\n//   Increment = (e) => {\n//     this.setState((prevState) => {\n//       return { [e.target.name]: prevState[e.target.name] + 1 };\n//     });\n//   };\n\n//   countTotalFeedback = () => {\n//     return this.state.good + this.state.neutral + this.state.bad;\n//   };\n\n//   countPositiveFeedbackPercentage = () => {\n//     return Math.round((this.state.good / this.countTotalFeedback()) * 100);\n//   };\n\n//   render() {\n//     const { good, neutral, bad } = this.state;\n//     return (\n//       <div>\n//         <Section title={\"Please leave feedback\"}>\n//           <FeedbackOptions\n//             options={Object.keys(this.state)}\n//             onLeaveFeedback={this.Increment}\n//           />\n//         </Section>\n\n//         <Section title={\"Statistics\"}>\n//           {this.countTotalFeedback() ? (\n//             <Statistics\n//               total={this.countTotalFeedback()}\n//               goodPercentage={this.countPositiveFeedbackPercentage()}\n//               good={good}\n//               neutral={neutral}\n//               bad={bad}\n//             />\n//           ) : (\n//             <Notification message={\"No feedback given\"} />\n//           )}\n//         </Section>\n//       </div>\n//     );\n//   }\n// }\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Statistic_item__32dii\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__3KHlY\"};"],"sourceRoot":""}